#include "LanguageTerms.h"

// CPlusPlusTerms
const QStringList CPlusPlusTerms = {
    "char", "float", "double", "short", "long", "long long",
    "unsigned int", "unsigned short", "unsigned long", "unsigned long long",
    "long double", "array", "pointer", "reference", "function",
    "struct", "union", "enum", "typedef", "class", "bool", "int",
    "const", "volatile", "static", "extern", "inline", "template",
    "namespace", "public", "protected", "private", "friend", "virtual",
    "override", "final", "dynamic_cast", "static_cast", "const_cast", "reinterpret_cast",
    "operator", "new", "delete", "this", "typeid", "sizeof", "decltype", "alignas", "alignof",
    // Shared terms
    "char", "int", "float", "double", "short", "long", "const", "static", "extern", "typedef", 
    "struct", "union", "enum", "return", "if", "else", "for", "while", "do", "break", "continue", 
    "sizeof", "pointer", "function"
};

// PythonTerms
const QStringList PythonTerms = {
    "int", "float", "str", "list", "tuple", "dict", "set", "bool", "bytes", "bytearray",
    "None", "if", "else", "elif", "for", "while", "break", "continue", "pass", "return",
    "def", "class", "import", "from", "as", "with", "try", "except", "finally", "raise",
    "lambda", "map", "filter", "reduce", "comprehensions", "generator", "yield",
    "open", "close", "read", "write", "append", "seek", "format", "f-string", "print",
    "type", "isinstance", "issubclass", "staticmethod", "classmethod", "property", "self",
    // Shared terms
    "int", "float", "class", "if", "else", "for", "while", "break", "continue", "return", "yield"
};

// BashTerms
const QStringList BashTerms = {
    "echo", "printf", "cat", "grep", "awk", "sed", "cut", "sort", "uniq", "find",
    "locate", "xargs", "head", "tail", "chmod", "chown", "ln", "cp", "mv", "rm",
    "touch", "mkdir", "rmdir", "ls", "pwd", "cd", "bash", "sh", "source", "export",
    "unset", "alias", "unalias", "history", "jobs", "fg", "bg", "kill", "ps", "top",
    "ps aux", "tar", "gzip", "gunzip", "zip", "unzip", "wget", "curl", "sed -e", "awk '{print $1}'",
    "if", "then", "else", "elif", "fi", "for", "in", "do", "done", "while", "until",
    "case", "esac", "function", "return", "local", "getopts", "shift", "test", "[", "]",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// JavaTerms
const QStringList JavaTerms = {
    "int", "float", "double", "char", "byte", "short", "long", "boolean", "String", "array",
    "class", "interface", "enum", "abstract", "final", "static", "public", "private", "protected", "void",
    "new", "this", "super", "extends", "implements", "instanceof", "throws", "throw", "try",
    "catch", "finally", "assert", "synchronized", "volatile", "transient", "default", "constructor", "destructor",
    "method", "field", "variable", "package", "import", "main", "return", "break",
    "continue", "if", "else", "switch", "case", "default", "for", "while", "do", "instanceof",
    // Shared terms
    "int", "float", "class", "if", "else", "for", "while", "break", "continue", "return"
};

// JavaScriptTerms
const QStringList JavaScriptTerms = {
    "var", "let", "const", "function", "return", "if", "else", "switch", "case", "default",
    "for", "while", "do", "break", "continue", "try", "catch", "finally", "throw", "async",
    "await", "class", "extends", "constructor", "super", "static", "import", "export", "module", "default",
    "this", "prototype", "new", "delete", "typeof", "instanceof", "void", "null", "undefined", "NaN",
    "Infinity", "Promise", "fetch", "map", "filter", "reduce", "concat", "slice", "splice", "push",
    "pop", "shift", "unshift", "toString", "valueOf", "JSON", "Object", "Array", "String", "Number", "Boolean", "Symbol",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// AssemblyTerms
const QStringList AssemblyTerms = {
    "MOV", "ADD", "SUB", "MUL", "DIV", "AND", "OR", "XOR", "NOT", "SHL",
    "SHR", "CMP", "JMP", "JE", "JNE", "JG", "JL", "JGE", "JLE", "CALL",
    "RET", "PUSH", "POP", "LEA", "NOP", "INT", "HLT", "INC", "DEC", "AL",
    "BL", "CL", "DL", "AX", "BX", "CX", "DX", "EAX", "EBX", "ECX",
    "EDX", "RAX", "RBX", "RCX", "RDX", "RSP", "RBP", "RSI", "RDI", "ESP",
    "EBP", "ESI", "EDI", "CS", "DS", "SS", "ES", "FS", "GS", "MOVZX", "MOVSX"
};

// CTerms
const QStringList CTerms = {
    "char", "int", "float", "double", "short", "long", "unsigned", "signed", "void", "enum",
    "struct", "union", "typedef", "const", "volatile", "static", "extern", "auto", "register", "inline",
    "sizeof", "typeof", "printf", "scanf", "malloc", "free", "calloc", "realloc", "return", "break",
    "continue", "goto", "if", "else", "switch", "case", "default", "for", "while", "do",
    "define", "include", "macro", "assert", "pointer", "reference", "function", "callback", "file", "fopen",
    "static_assert", "restrict",
    // Shared terms
    "char", "int", "float", "double", "short", "long", "const", "static", "extern", "typedef",
    "struct", "union", "enum", "return", "if", "else", "for", "while", "do", "break", "continue",
    "sizeof", "pointer", "function"
};

// RustTerms
const QStringList RustTerms = {
    "fn", "let", "mut", "const", "static", "if", "else", "match", "for", "while",
    "loop", "break", "continue", "return", "struct", "enum", "trait", "impl", "use", "mod",
    "pub", "crate", "self", "super", "as", "dyn", "await", "async", "Box", "Rc",
    "Arc", "RefCell", "Mutex", "Atomic", "Option", "Result", "Vec", "HashMap", "HashSet",
    "String", "slice", "array", "tuple", "pointer", "unsafe", "macro", "derive", "type", "size_of",
    "align_of", "default", "where", "type_id", "trait"
};

// FortranTerms
const QStringList FortranTerms = {
    "program", "end", "implicit", "none", "integer", "real", "double", "complex", "logical", "character",
    "parameter", "dimension", "allocate", "deallocate", "do", "if", "else", "elseif", "select", "case",
    "switch", "continue", "return", "call", "subroutine", "function", "module", "use", "interface", "contains",
    "extern", "open", "close", "read", "write", "print", "format", "backspace", "rewind", "endfile", "inquire",
    "pause", "stop", "data", "read", "write", "open", "close",
    // Shared terms
    "if", "else", "do", "return", "call", "continue"
};

// PhpTerms
const QStringList PhpTerms = {
    "echo", "print", "include", "require", "include_once", "require_once", "var", "public", "private", "protected",
    "function", "class", "extends", "implements", "interface", "abstract", "static", "final", "const", "foreach",
    "while", "for", "if", "else", "elseif", "switch", "case", "default", "break", "continue", "return", "try",
    "catch", "finally", "throw", "isset", "unset", "empty", "isset", "empty", "array", "json_encode", "json_decode",
    "isset", "unset", "empty", "global", "static", "super", "self", "parent", "new", "this", "namespace", "use",
    "trait", "callable", "yield", "list", "declare", "exit", "die", "assert", "call_user_func", "call_user_func_array",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// RubyTerms
const QStringList RubyTerms = {
    "def", "end", "class", "module", "include", "extend", "require", "include", "private", "protected", "public",
    "attr_reader", "attr_writer", "attr_accessor", "self", "super", "def", "initialize", "yield", "block", "lambda",
    "proc", "raise", "rescue", "ensure", "retry", "begin", "rescue", "ensure", "ensure", "return", "next", "redo",
    "break", "while", "until", "for", "case", "when", "else", "elsif", "unless", "defined?", "super", "alias",
    "method", "variable", "constant", "module", "namespace", "include", "extend", "private", "protected", "public",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return", "yield", "def"
};

// ObjectiveCTerms
const QStringList ObjectiveCTerms = {
    "int", "float", "double", "char", "id", "NSString", "NSArray", "NSDictionary", "UIView", "UIViewController",
    "IBOutlet", "IBAction", "nonatomic", "atomic", "strong", "weak", "assign", "copy", "readonly", "readwrite",
    "synthesize", "dynamic", "protocol", "delegate", "selector", "super", "self", "alloc", "init", "dealloc",
    "retain", "release", "autorelease", "try", "catch", "finally", "throw", "NSLog", "NSUserDefaults", "NSNotification",
    "NSNotificationCenter", "NSError", "NSFileManager", "NSFileHandle", "NSHTTPURLResponse", "NSURL", "NSURLRequest",
    "NSURLSession", "NSURLSessionTask", "NSURLSessionDataTask", "NSURLSessionUploadTask", "NSURLSessionDownloadTask",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// PerlTerms
const QStringList PerlTerms = {
    "my", "our", "local", "use", "require", "import", "sub", "package", "scalar", "array", "hash", "list",
    "foreach", "for", "while", "until", "if", "elsif", "else", "unless", "switch", "case", "default",
    "print", "say", "warn", "die", "open", "close", "read", "write", "seek", "tell", "chmod", "chown",
    "exec", "system", "map", "grep", "sort", "split", "join", "substitute", "match", "qr", "tr", "s///", "m//",
    "$_", "$@", "$!", "$0", "$1", "$2", "$3", "$@", "$^O", "$^C", "$^D", "$^V", "$^X",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

QStringList correctValueTexts = {"none"};

// Create a vector<QList<QList<QString>> containing all the QStringLists
const QVector<QStringList> AllTerms = {
    CPlusPlusTerms,
    PythonTerms,
    BashTerms,
    JavaTerms,
    JavaScriptTerms,
    AssemblyTerms,
    CTerms,
    RustTerms,
    FortranTerms,
    PhpTerms,
    RubyTerms,
    ObjectiveCTerms,
    PerlTerms
};

const QStringList Titles = {
    "C++", "Python", "Bash", "Java", "JavaScript", "Assembly", "C", "Rust", "Fortran",
    "PHP", "Ruby", "Objective-C", "Perl"
};

const std::unordered_map<std::string, std::string> explanationMap = {
    
    // CPlusPlusTerms
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"char", "Data type representing a single character."},
    {"std::string", "A class representing a sequence of characters."},
    {"bool", "Data type representing boolean values, true or false."},
    {"std::vector", "A dynamic array that can change size."},
    {"std::list", "A doubly linked list implementation."},
    {"std::map", "A collection of key-value pairs with unique keys."},
    {"std::set", "A collection of unique values."},
    {"class", "A blueprint for creating objects in object-oriented programming."},
    {"object", "An instance of a class."},
    {"struct", "A data structure that groups together different types of variables."},
    {"enum", "A data type consisting of a set of named values."},
    {"public", "An access specifier that allows class members to be accessible from outside the class."},
    {"private", "An access specifier that restricts access to class members from outside the class."},
    {"protected", "An access specifier that allows access to class members within the class and its subclasses."},
    {"static", "A keyword used to define variables and methods that belong to the class, rather than instances of the class."},
    {"inline", "A keyword used to suggest to the compiler to inline a function to reduce function call overhead."},
    {"virtual", "A keyword in C++ indicating that a function can be overridden in derived classes."},
    {"override", "A keyword used to indicate that a method overrides a base class method."},
    {"const", "Specifies that a variable's value cannot be changed after initialization."},
    {"volatile", "Specifies that a variable's value may change at any time without any action being taken by the code the compiler finds nearby."},
    {"template", "A feature in C++ that allows functions and classes to operate with generic types."},
    {"sizeof", "An operator in C++ that returns the size of a variable or data type in bytes."},
    {"typeid", "An operator in C++ that returns type information about an expression."},
    {"decltype", "A keyword in C++ used to query the type of an expression."},
    {"alignas", "A keyword in C++ that specifies the alignment requirement of a variable."},
    {"alignof", "A keyword in C++ that returns the alignment requirement of a type."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Used to raise an exception."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "Executes a block of code once before checking the condition in a do-while loop."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"switch", "A conditional construct that executes code based on the value of a variable."},
    {"case", "Defines a branch in a switch statement."},
    {"default", "Specifies the default block of code in a switch statement if no case matches."},
    {"goto", "Transfers control to another part of the program (generally discouraged in high-level programming)."},
    {"namespace", "A container for identifiers to prevent naming conflicts in C++."},
    {"using", "Introduces a name from a namespace into the current scope."},
    {"typedef", "Defines a new name for an existing data type."},
    {"friend", "Allows a function or class to access private and protected members of another class."},
    {"auto", "A keyword used for type inference in variable declarations."},
    {"decltype", "A keyword that determines the type of an expression."},
    {"nullptr", "A type-safe null pointer constant."},

    // PythonTerms
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"str", "Data type representing a sequence of characters (string)."},
    {"list", "A type of array with dynamic sizing and operations in Python."},
    {"tuple", "An immutable sequence of values in Python."},
    {"dict", "A data structure representing a collection of key-value pairs (dictionary) in Python."},
    {"set", "A collection of unique values in Python."},
    {"bool", "Data type representing boolean values, true or false."},
    {"bytes", "Immutable sequence of bytes in Python."},
    {"bytearray", "Mutable sequence of bytes in Python."},
    {"None", "A special constant in Python representing the absence of a value."},
    {"if", "A conditional statement that executes code if its condition is true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"elif", "Short for 'else if', a conditional statement that tests another condition."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"pass", "A null statement in Python, used as a placeholder."},
    {"return", "Ends the execution of a function and optionally returns a value."},
    {"def", "Defines a new function in Python."},
    {"class", "Defines a new class in Python."},
    {"import", "Brings in modules or libraries into the current namespace."},
    {"from", "Imports specific parts of a module or library."},
    {"as", "Assigns an alias to a module or library."},
    {"with", "Used to wrap the execution of a block with methods defined by a context manager."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"except", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and except blocks."},
    {"raise", "Used to raise an exception in Python."},
    {"lambda", "Defines an anonymous function in Python."},
    {"map", "A function that applies a given operation to each item of an iterable and returns a list of the results."},
    {"filter", "A function that constructs an iterator from elements of an iterable for which a function returns true."},
    {"reduce", "A function that applies a rolling computation to sequential pairs of values."},
    {"comprehensions", "A concise way to create lists, dictionaries, or sets in Python."},
    {"generator", "A function that returns an iterator which yields items one at a time."},
    {"yield", "Pauses the function and returns a generator object."},
    {"open", "Opens a file and returns a file object."},
    {"close", "Closes a file object."},
    {"read", "Reads the contents of a file object."},
    {"write", "Writes data to a file object."},
    {"append", "Adds data to the end of a file object."},
    {"seek", "Moves the file pointer to a specific position in a file."},
    {"format", "Formats strings or values."},
    {"f-string", "A way to format strings in Python using expressions inside curly braces."},
    {"print", "Outputs data to the standard output."},
    {"type", "Returns the type of an object."},
    {"isinstance", "Checks if an object is an instance of a class or a subclass thereof."},
    {"issubclass", "Checks if a class is a subclass of another class."},
    {"staticmethod", "Defines a method that does not receive an implicit first argument."},
    {"classmethod", "Defines a method that receives the class as an implicit first argument."},
    {"property", "Defines a method that can be accessed like an attribute."},
    {"self", "Represents the instance of the class in instance methods."},

    // BashTerms
    {"echo", "Displays a line of text or string."},
    {"printf", "Formats and prints data."},
    {"cat", "Concatenates and displays the content of files."},
    {"grep", "Searches for patterns in files."},
    {"awk", "A programming language used for pattern scanning and processing."},
    {"sed", "A stream editor for filtering and transforming text."},
    {"cut", "Removes sections from each line of files."},
    {"sort", "Sorts lines of text files."},
    {"uniq", "Reports or omits repeated lines."},
    {"find", "Searches for files in a directory hierarchy."},
    {"locate", "Finds files by name using a prebuilt database."},
    {"xargs", "Builds and executes command lines from standard input."},
    {"wc", "Counts lines, words, and characters in files."},
    {"chmod", "Changes the permissions of a file or directory."},
    {"chown", "Changes the owner of a file or directory."},
    {"ps", "Reports a snapshot of current processes."},
    {"top", "Displays real-time information about system processes."},
    {"kill", "Sends signals to processes, usually to terminate them."},
    {"killall", "Terminates all processes with a specific name."},
    {"nohup", "Runs a command immune to hangups, with output to a non-tty."},
    {"bg", "Resumes a suspended job in the background."},
    {"fg", "Brings a background job to the foreground."},
    {"jobs", "Lists jobs that you have suspended."},
    {"history", "Displays the command history."},
    {"alias", "Creates an alias for a command."},
    {"unalias", "Removes an alias."},
    {"source", "Reads and executes commands from a file in the current shell."},
    {"export", "Sets environment variables or exports them to child processes."},
    {"unset", "Unsets a variable or function."},
    {"set", "Sets shell options or positional parameters."},
    {"unset", "Removes a variable or function definition."},
    {"trap", "Specifies commands to execute when the shell receives signals."},
    {"exec", "Replaces the shell with the specified command."},
    {"read", "Reads a line from standard input and assigns it to variables."},
    {"select", "Displays a menu for user selection."},
    {"test", "Evaluates conditional expressions."},
    {"[[", "A more flexible conditional expression evaluation than test."},

    // JavaTerms
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"char", "Data type representing a single character."},
    {"boolean", "Data type representing boolean values, true or false."},
    {"String", "A class representing a sequence of characters."},
    {"ArrayList", "A resizable array implementation of the List interface."},
    {"HashMap", "A hash table-based implementation of the Map interface."},
    {"LinkedList", "A doubly linked list implementation of the List and Deque interfaces."},
    {"Set", "An interface representing a collection of unique elements."},
    {"Map", "An interface representing a collection of key-value pairs."},
    {"class", "A blueprint for creating objects in object-oriented programming."},
    {"object", "An instance of a class."},
    {"interface", "A reference type that can contain only constants, method signatures, default methods, static methods, and nested types."},
    {"extends", "Defines a subclass in Java."},
    {"implements", "Indicates that a class implements an interface."},
    {"super", "Refers to the superclass of the current object."},
    {"this", "Refers to the current object instance."},
    {"static", "Defines class-level variables and methods."},
    {"final", "Defines constants, prevents method overriding, and inheritance."},
    {"abstract", "Defines classes or methods that cannot be instantiated or need to be overridden."},
    {"synchronized", "Ensures that a method or block of code is accessed by only one thread at a time."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Used to raise an exception."},
    {"throws", "Indicates that a method may throw exceptions."},
    {"return", "Ends the execution of a method and optionally returns a value."},
    {"if", "A conditional statement that executes code if its condition is true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "Executes a block of code once before checking the condition in a do-while loop."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"switch", "A conditional construct that executes code based on the value of a variable."},
    {"case", "Defines a branch in a switch statement."},
    {"default", "Specifies the default block of code in a switch statement if no case matches."},
    {"goto", "Transfers control to another part of the program (generally discouraged in high-level programming)."},
    {"instanceof", "Tests whether an object is an instance of a specific class or interface."},
    {"new", "Creates new objects or instances of a class."},
    {"delete", "Releases memory occupied by an object (not used in Java but present in C++)."},
    {"assert", "Evaluates a boolean expression and throws an AssertionError if the expression is false."},
    
        // JavaScriptTerms
    {"function", "Defines a block of code that can be executed when called."},
    {"var", "Declares a variable that is function-scoped or globally-scoped."},
    {"let", "Declares a block-scoped variable that can be reassigned."},
    {"const", "Declares a block-scoped variable that cannot be reassigned after initialization."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"else if", "Defines an alternative condition to test in an if statement."},
    {"switch", "A conditional construct that executes code based on the value of an expression."},
    {"case", "Defines a branch in a switch statement."},
    {"default", "Specifies the default branch in a switch statement when no other case matches."},
    {"for", "A loop construct used to iterate over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "A loop construct that executes code at least once and then repeats as long as a condition is true."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Used to raise an exception."},
    {"async", "Defines an asynchronous function that returns a promise."},
    {"await", "Suspends the execution of an async function until a promise is resolved."},
    {"promise", "Represents a value that may be available now, or in the future, or never."},
    {"class", "Defines a blueprint for creating objects with shared properties and methods."},
    {"constructor", "A special method for initializing new objects created by a class."},
    {"extends", "Indicates that a class is inheriting from another class."},
    {"super", "Refers to the superclass of the current class and allows access to its methods and properties."},
    {"static", "Defines methods or properties that belong to the class itself rather than instances of the class."},
    {"import", "Brings in functions, objects, or primitives from other modules or files."},
    {"export", "Makes functions, objects, or primitives available to other modules or files."},
    {"module", "A file or a collection of files that encapsulates code and exports it for use in other modules."},
    {"default", "Specifies the default export of a module."},
    {"template literal", "A way to create strings with embedded expressions using backticks (`)."},
    {"destructuring", "A syntax for unpacking values from arrays or properties from objects into distinct variables."},
    {"spread operator", "Expands an iterable (like an array) into individual elements or properties."},
    {"rest parameter", "Collects all remaining arguments of a function into an array."},
    {"getter", "A method that retrieves the value of a property."},
    {"setter", "A method that sets the value of a property."},
    {"prototype", "An object from which other objects inherit properties and methods."},
    {"this", "Refers to the current instance of an object or class."},
    {"window", "Represents the global object in a web browser environment."},
    {"document", "Represents the web page and allows access to its content and structure."},
    {"event", "Represents an action that occurs in the browser, such as a user interaction."},
    {"addEventListener", "Attaches an event handler to a specific event on an element."},
    {"fetch", "A method for making network requests and handling responses."},
    {"ajax", "A technique for making asynchronous HTTP requests to the server."},
    {"localStorage", "A web storage API for storing data persistently in the browser."},
    {"sessionStorage", "A web storage API for storing data for the duration of the page session."},
    {"JSON", "A format for representing structured data as text, often used for data interchange."},
    {"eval", "A function that evaluates a string of JavaScript code."},
    {"callback", "A function passed as an argument to another function to be executed later."},
    {"promise.all", "A method that takes an iterable of promises and, when all of the promises have resolved, returns a single promise."},
    {"promise.race", "A method that returns a promise that resolves or rejects as soon as one of the promises in an iterable resolves or rejects."},
    {"async/await", "Syntax for working with asynchronous code that allows writing asynchronous code that looks synchronous."},
    {"symbol", "A primitive data type used to create unique identifiers for object properties."},
    {"iterator", "An object that defines a sequence and potentially a return value upon its termination."},
    {"generator", "A special type of iterator that can be paused and resumed, defined using function* and yielding values."},

    // AssemblyTerms
    {"MOV", "Moves data from one location to another."},
    {"ADD", "Adds two values and stores the result in a destination."},
    {"SUB", "Subtracts one value from another and stores the result in a destination."},
    {"MUL", "Multiplies two values and stores the result in a destination."},
    {"DIV", "Divides one value by another and stores the result in a destination."},
    {"AND", "Performs a bitwise AND operation between two values."},
    {"OR", "Performs a bitwise OR operation between two values."},
    {"XOR", "Performs a bitwise XOR operation between two values."},
    {"NOT", "Performs a bitwise NOT operation, inverting all bits of the operand."},
    {"SHL", "Shifts the bits of a value to the left, filling in zeros from the right."},
    {"SHR", "Shifts the bits of a value to the right, filling in zeros or the sign bit from the left."},
    {"CMP", "Compares two values and sets the flags based on the result."},
    {"JMP", "Unconditionally jumps to a specified address or label."},
    {"JE", "Jumps to a specified address if the last comparison was equal."},
    {"JNE", "Jumps to a specified address if the last comparison was not equal."},
    {"JG", "Jumps to a specified address if the last comparison was greater than."},
    {"JL", "Jumps to a specified address if the last comparison was less than."},
    {"JGE", "Jumps to a specified address if the last comparison was greater than or equal."},
    {"JLE", "Jumps to a specified address if the last comparison was less than or equal."},
    {"CALL", "Calls a procedure or function, saving the return address on the stack."},
    {"RET", "Returns from a procedure or function, restoring the return address from the stack."},
    {"PUSH", "Pushes a value onto the stack."},
    {"POP", "Pops a value off the stack into a destination."},
    {"LEA", "Loads the effective address of an operand into a register."},
    {"NOP", "No operation; a placeholder that does nothing."},
    {"INT", "Generates a software interrupt, calling an interrupt handler."},
    {"HLT", "Halts the processor, typically used to end program execution."},
    {"INC", "Increments the value of an operand by one."},
    {"DEC", "Decrements the value of an operand by one."},
    {"AL", "The low byte of the AX register in x86 assembly."},
    {"BL", "The low byte of the BX register in x86 assembly."},
    {"CL", "The low byte of the CX register in x86 assembly."},
    {"DL", "The low byte of the DX register in x86 assembly."},
    {"AX", "The 16-bit accumulator register in x86 assembly."},
    {"BX", "The 16-bit base register in x86 assembly."},
    {"CX", "The 16-bit count register in x86 assembly."},
    {"DX", "The 16-bit data register in x86 assembly."},
    {"EAX", "The 32-bit extended accumulator register in x86 assembly."},
    {"EBX", "The 32-bit extended base register in x86 assembly."},
    {"ECX", "The 32-bit extended count register in x86 assembly."},
    {"EDX", "The 32-bit extended data register in x86 assembly."},
    {"RAX", "The 64-bit extended accumulator register in x86 assembly."},
    {"RBX", "The 64-bit extended base register in x86 assembly."},
    {"RCX", "The 64-bit extended count register in x86 assembly."},
    {"RDX", "The 64-bit extended data register in x86 assembly."},
    {"RSP", "The 64-bit stack pointer register in x86 assembly."},
    {"RBP", "The 64-bit base pointer register in x86 assembly."},
    {"RSI", "The 64-bit source index register in x86 assembly."},
    {"RDI", "The 64-bit destination index register in x86 assembly."},
    {"ESP", "The 32-bit stack pointer register in x86 assembly."},
    {"EBP", "The 32-bit base pointer register in x86 assembly."},
    {"ESI", "The 32-bit source index register in x86 assembly."},
    {"EDI", "The 32-bit destination index register in x86 assembly."},
    {"CS", "The code segment register in x86 assembly."},
    {"DS", "The data segment register in x86 assembly."},
    {"SS", "The stack segment register in x86 assembly."},
    {"ES", "The extra segment register in x86 assembly."},
    {"FS", "The additional segment register in x86 assembly used for specific purposes."},
    {"GS", "The additional segment register in x86 assembly used for specific purposes."},
    {"MOVZX", "Moves data with zero-extension from a source to a destination."},
    {"MOVSX", "Moves data with sign-extension from a source to a destination."},
    {"PUSHF", "Pushes the flags register onto the stack."},
    {"POPF", "Pops the flags register from the stack."},
    {"CLI", "Clears the interrupt flag, disabling interrupts."},
    {"STI", "Sets the interrupt flag, enabling interrupts."},

    // CTerms
    {"char", "Data type representing a single character."},
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"short", "Data type representing short integer values."},
    {"long", "Data type representing long integer values."},
    {"unsigned", "Specifies that a variable or data type can only represent non-negative values."},
    {"signed", "Specifies that a variable or data type can represent both positive and negative values."},
    {"void", "Represents the absence of a type or a function that does not return a value."},
    {"enum", "A data type consisting of a set of named values, often used to define constants."},
    {"struct", "A data structure that groups together different types of variables."},
    {"union", "A data structure that allows storing different data types in the same memory location."},
    {"typedef", "Defines a new name for an existing data type."},
    {"const", "Specifies that a variable's value cannot be changed after initialization."},
    {"volatile", "Specifies that a variable's value may change at any time, preventing optimization by the compiler."},
    {"static", "Defines variables and functions that belong to the class or file, rather than instances or scope."},
    {"extern", "Declares a variable or function that is defined in another file or module."},
    {"auto", "Specifies automatic storage duration for a variable, typically local to a function."},
    {"register", "Suggests to the compiler that a variable should be stored in a CPU register for faster access."},
    {"inline", "Suggests to the compiler to insert the function's code directly where it is called, to reduce function call overhead."},
    {"sizeof", "An operator that returns the size of a variable or data type in bytes."},
    {"typeof", "An operator (non-standard) that returns the type of an expression (often used in GNU C extensions)."},
    {"printf", "A function that formats and prints data to the standard output."},
    {"scanf", "A function that reads formatted input from the standard input."},
    {"malloc", "Allocates a specified number of bytes of memory and returns a pointer to it."},
    {"free", "Deallocates previously allocated memory."},
    {"calloc", "Allocates memory for an array of elements and initializes it to zero."},
    {"realloc", "Resizes a previously allocated memory block."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"goto", "Transfers control to a labeled statement within the same function."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"switch", "A multi-way branch statement that selects execution based on the value of an expression."},
    {"case", "Defines a branch in a switch statement for a specific value."},
    {"default", "Defines the default branch in a switch statement when no case matches."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "Executes a block of code once before checking the condition in a do-while loop."},
    {"define", "Defines a macro or constant in the preprocessor."},
    {"include", "Includes the contents of a file in the source code during preprocessing."},
    {"macro", "A preprocessor directive that defines a code template for substitution."},
    {"assert", "A macro that checks a condition and aborts the program if the condition is false."},
    {"pointer", "A variable that holds the memory address of another variable or data."},
    {"reference", "An alias for another variable (not directly available in C, but in C++)."},
    {"function", "A block of code designed to perform a specific task, often taking inputs and returning outputs."},
    {"callback", "A function passed as an argument to another function, to be invoked later."},
    {"file", "An abstract representation of data storage, used for reading and writing data."},
    {"fopen", "Opens a file and returns a file pointer."},
    {"static_assert", "A compile-time assertion that checks a condition in C++ (available in C11 as _Static_assert)."},
    {"restrict", "A qualifier that specifies that a pointer is the only means of accessing the object it points to."},

    // RustTerms
    {"fn", "Defines a function in Rust."},
    {"let", "Declares a variable in Rust."},
    {"mut", "Specifies that a variable is mutable and can be changed."},
    {"const", "Defines a constant value that cannot be changed."},
    {"static", "Defines a static variable that lives for the entire duration of the program."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"match", "A powerful control flow construct that compares a value against patterns."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"loop", "A loop construct that continuously executes code until explicitly broken."},
    {"break", "Exits from a loop or match expression."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"return", "Ends the execution of a function and optionally returns a value."},
    {"struct", "A data structure that groups together different types of variables."},
    {"enum", "A data type consisting of a set of named values."},
    {"trait", "Defines shared behavior that types can implement."},
    {"impl", "Implements methods and traits for a type."},
    {"use", "Brings paths into scope to simplify code."},
    {"mod", "Defines a module for organizing code."},
    {"pub", "Makes items public, allowing access from outside the module."},
    {"crate", "A package of Rust code."},
    {"self", "Refers to the current module or instance."},
    {"super", "Refers to the parent module."},
    {"as", "Used for type casting or renaming imports."},
    {"dyn", "Used for dynamic dispatch in trait objects."},
    {"await", "Suspends execution until a future is ready."},
    {"async", "Defines an asynchronous function or block."},
    {"Box", "A smart pointer for heap allocation."},
    {"Rc", "A reference-counted smart pointer for shared ownership."},
    {"Arc", "An atomic reference-counted smart pointer for thread-safe shared ownership."},
    {"RefCell", "A mutable memory location with dynamic borrow checking."},
    {"Mutex", "A mutual exclusion primitive for thread-safe access to data."},
    {"Atomic", "A module for atomic operations on primitive types."},
    {"Option", "A type that represents an optional value, which can be either Some(T) or None."},
    {"Result", "A type that represents either success (Ok) or failure (Err)."},

    // FortranTerms
    {"program", "Defines the main program block in Fortran."},
    {"end", "Marks the end of a program, subroutine, function, or module."},
    {"implicit", "Specifies implicit typing rules for variables."},
    {"none", "Disables implicit typing."},
    {"integer", "Data type representing integer values."},
    {"real", "Data type representing single-precision floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"complex", "Data type representing complex numbers."},
    {"logical", "Data type representing boolean values, true or false."},
    {"character", "Data type representing a sequence of characters."},
    {"parameter", "Defines a constant value."},
    {"dimension", "Specifies the size of an array."},
    {"allocate", "Dynamically allocates memory for arrays."},
    {"deallocate", "Frees memory allocated for arrays."},
    {"do", "A loop construct that iterates over a range of values."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"elseif", "Defines an alternative condition in an if statement."},
    {"select", "Begins a case selection block (similar to switch-case in other languages)."},
    {"case", "Defines a branch in a select case statement."},
    {"switch", "A conditional construct similar to select case (not typically used in modern Fortran)."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"return", "Ends the execution of a function or subroutine and optionally returns a value."},
    {"call", "Invokes a subroutine or function."},
    {"subroutine", "Defines a block of code that can be called with parameters."},
    {"function", "Defines a block of code that returns a value."},
    {"module", "Defines a module for organizing code into logical units."},
    {"use", "Brings in a module's definitions into the current scope."},
    {"interface", "Defines a block that describes the interface to a procedure or function."},
    {"allocatable", "Specifies that an array's size can be determined at runtime."},
    {"external", "Specifies that a procedure is defined in another program unit."},
    {"data", "Initializes variables or arrays with specified values."},

    // PhpTerms
    {"echo", "Outputs one or more strings to the screen."},
    {"print", "Outputs a string to the screen and returns 1."},
    {"include", "Includes and evaluates a specified file in the script."},
    {"require", "Includes and evaluates a specified file; fatal error if the file is not found."},
    {"include_once", "Includes and evaluates a specified file only once in the script."},
    {"require_once", "Includes and evaluates a specified file only once; fatal error if the file is not found."},
    {"var", "Declares a variable (deprecated in favor of 'public')."},
    {"public", "An access specifier that allows class members to be accessible from outside the class."},
    {"private", "An access specifier that restricts access to class members from outside the class."},
    {"protected", "An access specifier that allows access to class members within the class and its subclasses."},
    {"function", "Defines a reusable block of code that performs a specific task."},
    {"class", "Defines a blueprint for creating objects, including properties and methods."},
    {"extends", "Indicates that a class is inheriting properties and methods from a parent class."},
    {"implements", "Indicates that a class is implementing an interface."},
    {"interface", "Defines a contract for classes, specifying methods that must be implemented."},
    {"abstract", "Defines a class or method that cannot be instantiated or used directly."},
    {"static", "Declares class members or methods that belong to the class itself rather than instances."},
    {"final", "Declares a class or method that cannot be extended or overridden."},
    {"const", "Defines a constant value that cannot be changed."},
    {"foreach", "Loops over each element of an array or object."},
    {"while", "Loops over a block of code as long as a condition is true."},
    {"for", "Loops over a block of code a specified number of times."},
    {"if", "Executes a block of code if its condition evaluates to true."},
    {"else", "Executes a block of code if the corresponding if condition is false."},
    {"elseif", "Provides an alternative condition to test if the initial if condition is false."},
    {"switch", "Selects one of many blocks of code to execute based on a value."},
    {"case", "Defines a branch in a switch statement."},
    {"default", "Specifies the default block of code to execute if no case matches in a switch statement."},
    {"break", "Exits from the current loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and proceeds to the next iteration."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"try", "Begins a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Throws an exception to be caught by catch blocks."},
    {"isset", "Determines if a variable is set and is not null."},
    {"unset", "Unsets a variable, destroying its value and making it undefined."},
    {"empty", "Checks if a variable is empty."},
    {"global", "Declares a variable as global, making it accessible across different scopes."},
    {"static", "Declares a variable that retains its value between function calls."},
    {"super", "Refers to a parent class or method, typically in the context of other object-oriented languages (not used in PHP)."},
    {"self", "Refers to the current class in PHP, used to access static members."},
    {"parent", "Refers to the parent class in PHP, used to access inherited mdefined using function* and yielding values. methods and properties."},
    {"new", "Instantiates a new object from a class."},
    {"this", "Refers to the current instance of the class."},
    {"namespace", "Defines a namespace to avoid name conflicts in PHP code."},
    {"use", "Imports a class or namespace to make it available in the current scope."},
    {"trait", "A mechanism for code reuse in PHP, allowing multiple classes to use the same methods."},
    {"callable", "Indicates that a function or method can be called."},
    {"yield", "Generates values from a generator function."},
    {"list", "Assigns values to a list of variables in one operation."},
    {"declare", "Sets execution directives for the current script."},
    {"exit", "Terminates the current script with an optional exit status."},
    {"die", "Alias of exit; terminates the current script with an optional exit status."},
    {"assert", "Evaluates an expression and triggers an error if the assertion fails."},
    {"call_user_func", "Calls a user-defined function."},
    {"call_user_func_array", "Calls a user-defined function with an array of parameters."},

    // RubyTerms
    {"def", "Defines a method in Ruby."},
    {"end", "Terminates a block of code, such as a method or class definition."},
    {"class", "Defines a new class in Ruby."},
    {"module", "Defines a module, a collection of methods and constants that can be included in classes."},
    {"include", "Mixes in a module's methods into a class."},
    {"extend", "Adds a module's methods to the class itself, making them class methods."},
    {"require", "Loads an external Ruby file, typically used for libraries and modules."},
    {"private", "Sets the visibility of methods to private, making them accessible only within the class."},
    {"protected", "Sets the visibility of methods to protected, allowing access within the class and its subclasses."},
    {"public", "Sets the visibility of methods to public, allowing access from outside the class."},
    {"attr_reader", "Creates getter methods for instance variables."},
    {"attr_writer", "Creates setter methods for instance variables."},
    {"attr_accessor", "Creates both getter and setter methods for instance variables."},
    {"self", "Refers to the current object or class instance."},
    {"super", "Calls a method of the same name from the parent class."},
    {"initialize", "Constructor method called when a new instance of a class is created."},
    {"yield", "Transfers control from a method to a block of code."},
    {"block", "A piece of code that can be passed to methods and executed."},
    {"lambda", "An anonymous function or closure, similar to a method but with a different scoping."},
    {"proc", "An object representing a block of code that can be stored in a variable and executed."},
    {"raise", "Triggers an exception."},
    {"rescue", "Handles exceptions that occur within a begin block."},
    {"ensure", "Defines a block of code that is always executed after rescue, regardless of whether an exception occurred."},
    {"retry", "Retries the execution of a block of code after handling an exception."},
    {"begin", "Starts a block of code that may raise exceptions."},
    {"return", "Exits from a method and optionally returns a value."},
    {"next", "Skips the rest of the current iteration of a loop and proceeds to the next iteration."},
    {"redo", "Repeats the current iteration of a loop."},
    {"break", "Exits from a loop."},
    {"while", "Loops over a block of code while a condition is true."},
    {"until", "Loops over a block of code until a condition is true."},
    {"for", "Loops over a range or collection."},
    {"case", "Evaluates an expression and executes code based on matching cases."},
    {"when", "Specifies a condition within a case statement."},
    {"else", "Defines a block of code to execute if no when conditions are matched in a case statement."},
    {"elsif", "Provides additional conditions to test within an if statement."},
    {"unless", "Executes a block of code if a condition is false."},
    {"defined?", "Checks whether a variable, method, or constant is defined."},
    {"alias", "Creates an alias for a method or variable name."},
    {"method", "A function defined within a class or module."},
    {"variable", "An identifier that holds data."},
    {"constant", "An identifier whose value cannot be changed once assigned."},
    {"module", "A collection of methods and constants that can be included in other modules or classes."},
    {"namespace", "A container for classes, modules, and constants to avoid name collisions."},
    {"include", "Mixes in a module's methods into a class or another module."},
    {"extend", "Adds a module's methods to the class or module itself, making them class or module methods."},
    {"private", "Sets methods to be accessible only within the class they are defined."},
    {"protected", "Allows methods to be accessed within the class and its subclasses."},
    {"public", "Sets methods to be accessible from outside the class."},

    // ObjectiveCTerms
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"char", "Data type representing a single character."},
    {"id", "A generic type representing any object in Objective-C."},
    {"NSString", "A class used to represent strings of characters in Objective-C."},
    {"NSArray", "A class representing an ordered collection of objects."},
    {"NSDictionary", "A class representing a collection of key-value pairs."},
    {"UIView", "A class representing a rectangular area on the screen in an iOS application."},
    {"UIViewController", "A class that manages a view hierarchy for an iOS application."},
    {"IBOutlet", "A keyword used to declare a property that is connected to a user interface element in Interface Builder."},
    {"IBAction", "A keyword used to declare a method that responds to user actions in Interface Builder."},
    {"nonatomic", "Specifies that a property is not thread-safe; used to improve performance."},
    {"atomic", "Specifies that a property is thread-safe; provides guarantees about consistency."},
    {"strong", "Specifies a strong reference to an object, ensuring that it is not deallocated while referenced."},
    {"weak", "Specifies a weak reference to an object, allowing it to be deallocated if no strong references exist."},
    {"assign", "Specifies a simple assignment of the property, often used for primitive types."},
    {"copy", "Creates a copy of the object for the property, ensuring the property holds its own instance."},
    {"readonly", "Specifies that the property can only be read, not modified."},
    {"readwrite", "Specifies that the property can be both read and modified."},
    {"synthesize", "Automatically generates the getter and setter methods for a property."},
    {"dynamic", "Indicates that the property's getter and setter methods are dynamically dispatched at runtime."},
    {"protocol", "A set of method declarations that can be implemented by classes."},
    {"delegate", "A design pattern where one object acts on behalf of another, typically by conforming to a protocol."},
    {"selector", "A unique identifier for a method that can be called on an object."},
    {"super", "Refers to the superclass of the current class, allowing access to its methods and properties."},
    {"self", "Refers to the current instance of a class."},
    {"alloc", "Allocates memory for a new instance of a class."},
    {"init", "Initializes a newly allocated instance of a class."},
    {"dealloc", "Called when an object is deallocated to perform cleanup operations."},
    {"retain", "Increases the reference count of an object to prevent deallocation."},
    {"release", "Decreases the reference count of an object, potentially leading to deallocation."},
    {"autorelease", "Marks an object for later release, allowing it to be automatically deallocated at an appropriate time."},
    {"try", "Begins a block of code that may throw an exception."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Raises an exception."},
    {"NSLog", "A function for logging messages to the console in Objective-C."},
    {"NSUserDefaults", "A class used for storing user preferences and application settings."},
    {"NSNotification", "A class representing a notification sent between objects in Objective-C."},
    {"NSNotificationCenter", "A class responsible for managing and dispatching notifications."},
    {"NSError", "A class representing an error condition in Objective-C."},
    {"NSFileManager", "A class for managing files and directories."},
    {"NSFileHandle", "A class for reading from and writing to files."},
    {"NSHTTPURLResponse", "A class representing an HTTP response in a network request."},
    {"NSURL", "A class representing a URL."},
    {"NSURLRequest", "A class representing a request to be sent over the network."},
    {"NSURLSession", "A class for managing network data transfer tasks."},
    {"NSURLSessionTask", "A base class for tasks managed by NSURLSession."},
    {"NSURLSessionDataTask", "A class for tasks that handle data transfer in network requests."},
    {"NSURLSessionUploadTask", "A class for tasks that handle file uploads."},
    {"NSURLSessionDownloadTask", "A class for tasks that handle file downloads."},

    // PerlTerms
    {"my", "Declares a new variable with local scope in Perl."},
    {"our", "Declares a new variable with global scope in Perl."},
    {"local", "Declares a new variable with lexical scope in Perl."},
    {"use", "Imports a module or pragma in Perl, making its functions and variables available."},
    {"require", "Loads and evaluates a module or file at runtime in Perl."},
    {"scalar", "A data type in Perl that holds a single value, such as a number or a string."},
    {"array", "A data structure in Perl that holds an ordered list of values."},
    {"hash", "A data structure in Perl that holds key-value pairs."},
    {"list", "A type of array with more dynamic sizing and operations, found in languages like Python and Ruby."},
    {"foreach", "A loop construct in Perl used to iterate over elements in an array or hash."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"until", "A loop construct that executes code as long as a condition is false."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"elsif", "An additional condition in an if-elsif-else chain."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"unless", "A conditional statement that executes code if its condition evaluates to false."},
    {"switch", "A conditional statement that allows branching based on different values."},
    {"case", "A branch in a switch statement that executes code if its value matches the switch expression."},
    {"default", "A branch in a switch statement that executes code if no case matches the switch expression."},
    {"print", "Outputs data to the standard output in Perl."},
    {"say", "Outputs data to the standard output with a newline character in Perl."},
    {"warn", "Generates a warning message in Perl."},
    {"die", "Terminates the program and optionally outputs an error message in Perl."},
    {"open", "Opens a file or filehandle in Perl."},
    {"close", "Closes a file or filehandle in Perl."},
    {"read", "Reads data from a file or filehandle in Perl."},
    {"write", "Writes data to a file or filehandle in Perl."},
    {"seek", "Moves the file pointer to a specified position in Perl."},
    {"tell", "Returns the current file pointer position in Perl."},
    {"chmod", "Changes the permissions of a file in Perl."},
    {"chown", "Changes the ownership of a file in Perl."},
    {"exec", "Executes a system command in Perl."},
    {"system", "Executes a system command and waits for it to complete in Perl."},
    {"map", "Applies a given function to each element of a list and returns a new list."},
    {"grep", "Filters a list by applying a given condition and returns the elements that match."},
    {"sort", "Sorts a list in Perl."},
    {"split", "Divides a string into a list of substrings based on a delimiter."},
    {"join", "Combines a list of substrings into a single string using a delimiter."},
    {"substitute", "Replaces occurrences of a pattern in a string with a replacement value."},
    {"match", "Checks if a string matches a given pattern."},
    {"qr", "Creates a regular expression object in Perl."},
    {"tr", "Transliterates characters in a string."},
    {"s///", "A substitution operator that replaces patterns in a string."},
    {"m//", "A match operator that checks if a string matches a pattern."},
    {"$_", "The default variable in Perl that represents the current input or pattern space."},
    {"@$", "The default array variable in Perl that represents the current list of values."},
    {"$!", "The current value of the error variable in Perl."},
    {"$0", "The name of the current script or program in Perl."},
    {"$1", "$2", "$3", "...", "Special variables in Perl that hold captured groups from regular expressions."},
    {"$^O", "The name of the operating system Perl is running on."},
    {"$^C", "The current value of the C locale in Perl."},
    {"$^D", "The current debugging level in Perl."},
    {"$^V", "The version of Perl currently being used."},
    {"$^X", "The value of the Perl interpreter's X option."}
    
    };