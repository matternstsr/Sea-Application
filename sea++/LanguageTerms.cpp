#include "LanguageTerms.h"

// CPlusPlusTerms
const QStringList CPlusPlusTerms = {
    "char", "float", "double", "short", "long", "long long",
    "unsigned int", "unsigned short", "unsigned long", "unsigned long long",
    "long double", "array", "pointer", "reference", "function",
    "struct", "union", "enum", "typedef", "class", "bool", "int",
    "const", "volatile", "static", "extern", "inline", "template",
    "namespace", "public", "protected", "private", "friend", "virtual",
    "override", "final", "dynamic_cast", "static_cast", "const_cast", "reinterpret_cast",
    "operator", "new", "delete", "this", "typeid", "sizeof", "decltype", "alignas", "alignof",
    // Shared terms
    "char", "int", "float", "double", "short", "long", "const", "static", "extern", "typedef", 
    "struct", "union", "enum", "return", "if", "else", "for", "while", "do", "break", "continue", 
    "sizeof", "pointer", "function"
};

// PythonTerms
const QStringList PythonTerms = {
    "int", "float", "str", "list", "tuple", "dict", "set", "bool", "bytes", "bytearray",
    "None", "if", "else", "elif", "for", "while", "break", "continue", "pass", "return",
    "def", "class", "import", "from", "as", "with", "try", "except", "finally", "raise",
    "lambda", "map", "filter", "reduce", "comprehensions", "generator", "yield",
    "open", "close", "read", "write", "append", "seek", "format", "f-string", "print",
    "type", "isinstance", "issubclass", "staticmethod", "classmethod", "property", "self",
    // Shared terms
    "int", "float", "class", "if", "else", "for", "while", "break", "continue", "return", "yield"
};

// BashTerms
const QStringList BashTerms = {
    "echo", "printf", "cat", "grep", "awk", "sed", "cut", "sort", "uniq", "find",
    "locate", "xargs", "head", "tail", "chmod", "chown", "ln", "cp", "mv", "rm",
    "touch", "mkdir", "rmdir", "ls", "pwd", "cd", "bash", "sh", "source", "export",
    "unset", "alias", "unalias", "history", "jobs", "fg", "bg", "kill", "ps", "top",
    "ps aux", "tar", "gzip", "gunzip", "zip", "unzip", "wget", "curl", "sed -e", "awk '{print $1}'",
    "if", "then", "else", "elif", "fi", "for", "in", "do", "done", "while", "until",
    "case", "esac", "function", "return", "local", "getopts", "shift", "test", "[", "]",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// JavaTerms
const QStringList JavaTerms = {
    "int", "float", "double", "char", "byte", "short", "long", "boolean", "String", "array",
    "class", "interface", "enum", "abstract", "final", "static", "public", "private", "protected", "void",
    "new", "this", "super", "extends", "implements", "instanceof", "throws", "throw", "try",
    "catch", "finally", "assert", "synchronized", "volatile", "transient", "default", "constructor", "destructor",
    "method", "field", "variable", "package", "import", "main", "return", "break",
    "continue", "if", "else", "switch", "case", "default", "for", "while", "do", "instanceof",
    // Shared terms
    "int", "float", "class", "if", "else", "for", "while", "break", "continue", "return"
};

// JavaScriptTerms
const QStringList JavaScriptTerms = {
    "var", "let", "const", "function", "return", "if", "else", "switch", "case", "default",
    "for", "while", "do", "break", "continue", "try", "catch", "finally", "throw", "async",
    "await", "class", "extends", "constructor", "super", "static", "import", "export", "module", "default",
    "this", "prototype", "new", "delete", "typeof", "instanceof", "void", "null", "undefined", "NaN",
    "Infinity", "Promise", "fetch", "map", "filter", "reduce", "concat", "slice", "splice", "push",
    "pop", "shift", "unshift", "toString", "valueOf", "JSON", "Object", "Array", "String", "Number", "Boolean", "Symbol",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// AssemblyTerms
const QStringList AssemblyTerms = {
    "MOV", "ADD", "SUB", "MUL", "DIV", "AND", "OR", "XOR", "NOT", "SHL",
    "SHR", "CMP", "JMP", "JE", "JNE", "JG", "JL", "JGE", "JLE", "CALL",
    "RET", "PUSH", "POP", "LEA", "NOP", "INT", "HLT", "INC", "DEC", "AL",
    "BL", "CL", "DL", "AX", "BX", "CX", "DX", "EAX", "EBX", "ECX",
    "EDX", "RAX", "RBX", "RCX", "RDX", "RSP", "RBP", "RSI", "RDI", "ESP",
    "EBP", "ESI", "EDI", "CS", "DS", "SS", "ES", "FS", "GS", "MOVZX", "MOVSX"
};

// CTerms
const QStringList CTerms = {
    "char", "int", "float", "double", "short", "long", "unsigned", "signed", "void", "enum",
    "struct", "union", "typedef", "const", "volatile", "static", "extern", "auto", "register", "inline",
    "sizeof", "typeof", "printf", "scanf", "malloc", "free", "calloc", "realloc", "return", "break",
    "continue", "goto", "if", "else", "switch", "case", "default", "for", "while", "do",
    "define", "include", "macro", "assert", "pointer", "reference", "function", "callback", "file", "fopen",
    "static_assert", "restrict",
    // Shared terms
    "char", "int", "float", "double", "short", "long", "const", "static", "extern", "typedef",
    "struct", "union", "enum", "return", "if", "else", "for", "while", "do", "break", "continue",
    "sizeof", "pointer", "function"
};

// RustTerms
const QStringList RustTerms = {
    "fn", "let", "mut", "const", "static", "if", "else", "match", "for", "while",
    "loop", "break", "continue", "return", "struct", "enum", "trait", "impl", "use", "mod",
    "pub", "crate", "self", "super", "as", "dyn", "await", "async", "Box", "Rc",
    "Arc", "RefCell", "Mutex", "Atomic", "Option", "Result", "Vec", "HashMap", "HashSet",
    "String", "slice", "array", "tuple", "pointer", "unsafe", "macro", "derive", "type", "size_of",
    "align_of", "default", "where", "type_id", "trait"
};

// FortranTerms
const QStringList FortranTerms = {
    "program", "end", "implicit", "none", "integer", "real", "double", "complex", "logical", "character",
    "parameter", "dimension", "allocate", "deallocate", "do", "if", "else", "elseif", "select", "case",
    "switch", "continue", "return", "call", "subroutine", "function", "module", "use", "interface", "contains",
    "extern", "open", "close", "read", "write", "print", "format", "backspace", "rewind", "endfile", "inquire",
    "pause", "stop", "data", "read", "write", "open", "close",
    // Shared terms
    "if", "else", "do", "return", "call", "continue"
};

// PhpTerms
const QStringList PhpTerms = {
    "echo", "print", "include", "require", "include_once", "require_once", "var", "public", "private", "protected",
    "function", "class", "extends", "implements", "interface", "abstract", "static", "final", "const", "foreach",
    "while", "for", "if", "else", "elseif", "switch", "case", "default", "break", "continue", "return", "try",
    "catch", "finally", "throw", "isset", "unset", "empty", "isset", "empty", "array", "json_encode", "json_decode",
    "isset", "unset", "empty", "global", "static", "super", "self", "parent", "new", "this", "namespace", "use",
    "trait", "callable", "yield", "list", "declare", "exit", "die", "assert", "call_user_func", "call_user_func_array",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

// RubyTerms
const QStringList RubyTerms = {
    "def", "end", "class", "module", "include", "extend", "require", "include", "private", "protected", "public",
    "attr_reader", "attr_writer", "attr_accessor", "self", "super", "def", "initialize", "yield", "block", "lambda",
    "proc", "raise", "rescue", "ensure", "retry", "begin", "rescue", "ensure", "ensure", "return", "next", "redo",
    "break", "while", "until", "for", "case", "when", "else", "elsif", "unless", "defined?", "super", "alias",
    "method", "variable", "constant", "module", "namespace", "include", "extend", "private", "protected", "public",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return", "yield", "def"
};


// PerlTerms
const QStringList PerlTerms = {
    "my", "our", "local", "use", "require", "import", "sub", "package", "scalar", "array", "hash", "list",
    "foreach", "for", "while", "until", "if", "elsif", "else", "unless", "switch", "case", "default",
    "print", "say", "warn", "die", "open", "close", "read", "write", "seek", "tell", "chmod", "chown",
    "exec", "system", "map", "grep", "sort", "split", "join", "substitute", "match", "qr", "tr", "s///", "m//",
    "$_", "$@", "$!", "$0", "$1", "$2", "$3", "$@", "$^O", "$^C", "$^D", "$^V", "$^X",
    // Shared terms
    "if", "else", "for", "while", "do", "break", "continue", "return"
};

QStringList correctValueTexts = {"none"};

// Create a vector<QList<QList<QString>> containing all the QStringLists
const QVector<QStringList> AllTerms = {
    CPlusPlusTerms,
    PythonTerms,
    BashTerms,
    JavaTerms,
    JavaScriptTerms,
    AssemblyTerms,
    CTerms,
    RustTerms,
    FortranTerms,
    PhpTerms,
    RubyTerms,
    PerlTerms
};

const QStringList Titles = {
    "C++", "Python", "Bash", "Java", "JavaScript", "Assembly", "C", "Rust", "Fortran",
    "PHP", "Ruby", "Objective-C", "Perl"
};

const std::unordered_map<std::string, std::string> explanationMap = {
    
    // TermDefinitions
    {"char", "Data type representing a single character."},
    {"int", "Data type representing integer values."},
    {"float", "Data type representing floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"short", "Data type representing short integer values."},
    {"long", "Data type representing long integer values."},
    {"long long", "Data type representing long long integer values."},
    {"unsigned int", "Data type representing non-negative integer values."},
    {"unsigned short", "Data type representing non-negative short integer values."},
    {"unsigned long", "Data type representing non-negative long integer values."},
    {"unsigned long long", "Data type representing non-negative long long integer values."},
    {"long double", "Data type representing extended precision floating-point numbers."},
    {"bool", "Data type representing boolean values, true or false."},
    {"std::string", "A class representing a sequence of characters."},
    {"std::vector", "A dynamic array that can change size."},
    {"std::list", "A doubly linked list implementation."},
    {"std::map", "A collection of key-value pairs with unique keys."},
    {"std::set", "A collection of unique values."},
    {"struct", "A data structure that groups together different types of variables."},
    {"union", "A data structure where members share the same memory location."},
    {"enum", "A data type consisting of a set of named values."},
    {"class", "A blueprint for creating objects in object-oriented programming."},
    {"object", "An instance of a class."},
    {"typedef", "Defines a new name for an existing data type."},
    {"public", "An access specifier that allows class members to be accessible from outside the class."},
    {"private", "An access specifier that restricts access to class members from outside the class."},
    {"protected", "An access specifier that allows access to class members within the class and its subclasses."},
    {"const", "Specifies that a variable's value cannot be changed after initialization."},
    {"volatile", "Specifies that a variable's value may change at any time without action from the code nearby."},
    {"static", "Defines variables and methods that belong to the class rather than instances of the class."},
    {"extern", "Declares a variable or function that is defined in another translation unit."},
    {"inline", "Suggests to the compiler to inline a function to reduce function call overhead."},
    {"template", "A feature in C++ that allows functions and classes to operate with generic types."},
    {"auto", "A keyword used for type inference in variable declarations."},
    {"decltype", "A keyword in C++ used to query the type of an expression."},
    {"nullptr", "A type-safe null pointer constant."},
    {"static_cast", "Performs a compile-time cast between compatible types."},
    {"dynamic_cast", "Performs a runtime cast, often used for safely downcasting in polymorphic scenarios."},
    {"const_cast", "Used to add or remove const or volatile qualifiers."},
    {"reinterpret_cast", "Converts between unrelated types by reinterpreting the bit pattern."},
    {"sizeof", "An operator in C++ that returns the size of a variable or data type in bytes."},
    {"typeid", "An operator in C++ that returns type information about an expression."},
    {"alignas", "A keyword in C++ that specifies the alignment requirement of a variable."},
    {"alignof", "A keyword in C++ that returns the alignment requirement of a type."},
    {"new", "Allocates memory and constructs an object."},
    {"delete", "Deallocates memory and destructs an object."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "Executes a block of code once before checking the condition in a do-while loop."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"switch", "A conditional construct that executes code based on the value of a variable."},
    {"case", "Defines a branch in a switch statement."},
    {"default", "Specifies the default block of code in a switch statement if no case matches."},
    {"goto", "Transfers control to another part of the program (generally discouraged in high-level programming)."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"throw", "Used to raise an exception."},
    {"namespace", "A container for identifiers to prevent naming conflicts in C++."},
    {"using", "Introduces a name from a namespace into the current scope."},
    {"friend", "Allows a function or class to access private and protected members of another class."},
    {"str", "Data type representing a sequence of characters (string)."},
    {"list", "A type of array with dynamic sizing and operations in Python."},
    {"tuple", "An immutable sequence of values in Python."},
    {"dict", "A data structure representing a collection of key-value pairs (dictionary) in Python."},
    {"set", "A collection of unique values in Python."},
    {"bytes", "Immutable sequence of bytes in Python."},
    {"bytearray", "Mutable sequence of bytes in Python."},
    {"None", "A special constant in Python representing the absence of a value."},
    {"elif", "Short for 'else if', a conditional statement that tests another condition."},
    {"pass", "A null statement in Python, used as a placeholder."},
    {"def", "Defines a new function in Python."},
    {"import", "Brings in modules or libraries into the current namespace."},
    {"from", "Imports specific parts of a module or library."},
    {"as", "Assigns an alias to a module or library."},
    {"with", "Used to wrap the execution of a block with methods defined by a context manager."},
    {"except", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and except blocks."},
    {"raise", "Used to raise an exception in Python."},
    {"lambda", "Defines an anonymous function in Python."},
    {"map", "A function that applies a given operation to each item of an iterable and returns a list of the results."},
    {"filter", "A function that constructs an iterator from elements of an iterable for which a function returns true."},
    {"reduce", "A function that applies a rolling computation to sequential pairs of values."},
    {"comprehensions", "A concise way to create lists, dictionaries, or sets in Python."},
    {"generator", "A function that returns an iterator which yields items one at a time."},
    {"yield", "Pauses the function and returns a generator object."},
    {"open", "Opens a file and returns a file object."},
    {"close", "Closes a file object."},
    {"read", "Reads the contents of a file object."},
    {"write", "Writes data to a file object."},
    {"append", "Adds data to the end of a file object."},
    {"seek", "Moves the file pointer to a specific position in a file."},
    {"format", "Formats strings or values."},
    {"f-string", "A way to format strings in Python using expressions inside curly braces."},
    {"print", "Outputs data to the standard output."},
    {"type", "Returns the type of an object."},
    {"isinstance", "Checks if an object is an instance of a class or a subclass thereof."},
    {"issubclass", "Checks if a class is a subclass of another class."},
    {"staticmethod", "Defines a method that does not receive an implicit first argument."},
    {"classmethod", "Defines a method that receives the class as an implicit first argument."},
    {"property", "Defines a method that can be accessed like an attribute."},
    {"self", "Represents the instance of the class in instance methods."},
    {"echo", "Displays a line of text or string."},
    {"printf", "Formats and prints data."},
    {"cat", "Concatenates and displays the content of files."},
    {"grep", "Searches for patterns in files."},
    {"awk", "A programming language used for pattern scanning and processing."},
    {"sed", "A stream editor for filtering and transforming text."},
    {"cut", "Removes sections from each line of files."},
    {"sort", "Sorts lines of text files."},
    {"uniq", "Reports or omits repeated lines."},
    {"find", "Searches for files in a directory hierarchy."},
    {"locate", "Finds files by name using a prebuilt database."},
    {"xargs", "Builds and executes command lines from standard input."},
    {"wc", "Counts lines, words, and characters in files."},
    {"chmod", "Changes the permissions of a file or directory."},
    {"chown", "Changes the owner of a file or directory."},
    {"ps", "Reports a snapshot of current processes."},
    {"top", "Displays real-time information about system processes."},
    {"kill", "Sends signals to processes, usually to terminate them."},
    {"killall", "Terminates all processes with a specific name."},
    {"nohup", "Runs a command immune to hangups, with output to a non-tty."},
    {"bg", "Resumes a suspended job in the background."},
    {"fg", "Brings a background job to the foreground."},
    {"jobs", "Lists jobs that you have suspended."},
    {"history", "Displays the command history."},
    {"alias", "Creates an alias for a command."},
    {"unalias", "Removes an alias."},
    {"source", "Reads and executes commands from a file in the current shell."},
    {"export", "Sets environment variables or exports them to child processes."},
    {"unset", "Unsets a variable or function."},
    {"set", "Sets shell options or positional parameters."},
    {"trap", "Specifies commands to execute when the shell receives signals."},
    {"exec", "Replaces the shell with the specified command."},
    {"read", "Reads a line from standard input and assigns it to variables."},
    {"select", "Displays a menu for user selection."},
    {"test", "Evaluates conditional expressions."},
    {"[[", "A more flexible conditional expression evaluation than test."},
    {"boolean", "Data type representing boolean values, true or false."},
    {"String", "A class representing a sequence of characters."},
    {"ArrayList", "A resizable array implementation of the List interface."},
    {"HashMap", "A hash table-based implementation of the Map interface."},
    {"LinkedList", "A doubly linked list implementation of the List and Deque interfaces."},
    {"Set", "An interface representing a collection of unique elements."},
    {"Map", "An interface representing a collection of key-value pairs."},
    {"interface", "A reference type that can contain only constants, method signatures, default methods, static methods, and nested types."},
    {"extends", "Defines a subclass in Java."},
    {"implements", "Indicates that a class implements an interface."},
    {"super", "Refers to the superclass of the current object."},
    {"this", "Refers to the current object instance."},
    {"final", "Defines constants, prevents method overriding, and inheritance."},
    {"abstract", "Defines classes or methods that cannot be instantiated or need to be overridden."},
    {"synchronized", "Ensures that a method or block of code is accessed by only one thread at a time."},
    {"throws", "Indicates that a method may throw exceptions."},
    {"default", "Specifies the default block of code in a switch statement if no case matches."},
    {"goto", "Transfers control to another part of the program (generally discouraged in high-level programming)."},
    {"instanceof", "Tests whether an object is an instance of a specific class or interface."},
    {"delete", "Releases memory occupied by an object (not used in Java but present in C++)."},
    {"assert", "Evaluates a boolean expression and throws an AssertionError if the expression is false."},
    {"function", "Defines a block of code that can be executed when called."},
    {"var", "Declares a variable that is function-scoped or globally-scoped."},
    {"let", "Declares a block-scoped variable that can be reassigned."},
    {"const", "Declares a block-scoped variable that cannot be reassigned after initialization."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"else if", "Defines an alternative condition to test in an if statement."},
    {"switch", "A conditional construct that executes code based on the value of an expression."},
    {"case", "Defines a branch in a switch statement."},
    {"for", "A loop construct used to iterate over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"do", "A loop construct that executes code at least once and then repeats as long as a condition is true."},
    {"break", "Exits from a loop or switch statement."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"return", "Ends the execution of a function and optionally returns a value to the caller."},
    {"try", "Starts a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Used to raise an exception."},
    {"async", "Defines an asynchronous function that returns a promise."},
    {"await", "Suspends the execution of an async function until a promise is resolved."},
    {"promise", "Represents a value that may be available now, or in the future, or never."},
    {"class", "Defines a blueprint for creating objects with shared properties and methods."},
    {"constructor", "A special method for initializing new objects created by a class."},
    {"static", "Defines methods or properties that belong to the class itself rather than instances of the class."},
    {"import", "Brings in functions, objects, or primitives from other modules or files."},
    {"export", "Makes functions, objects, or primitives available to other modules or files."},
    {"module", "A file or a collection of files that encapsulates code and exports it for use in other modules."},
    {"template literal", "A way to create strings with embedded expressions using backticks (`)."},
    {"destructuring", "A syntax for unpacking values from arrays or properties from objects into distinct variables."},
    {"spread operator", "Expands an iterable (like an array) into individual elements or properties."},
    {"rest parameter", "Collects all remaining arguments of a function into an array."},
    {"getter", "A method that retrieves the value of a property."},
    {"setter", "A method that sets the value of a property."},
    {"prototype", "An object from which other objects inherit properties and methods."},
    {"window", "Represents the global object in a web browser environment."},
    {"document", "Represents the web page and allows access to its content and structure."},
    {"event", "Represents an action that occurs in the browser, such as a user interaction."},
    {"addEventListener", "Attaches an event handler to a specific event on an element."},
    {"fetch", "A method for making network requests and handling responses."},
    {"ajax", "A technique for making asynchronous HTTP requests to the server."},
    {"localStorage", "A web storage API for storing data persistently in the browser."},
    {"sessionStorage", "A web storage API for storing data for the duration of the page session."},
    {"JSON", "A format for representing structured data as text, often used for data interchange."},
    {"eval", "A function that evaluates a string of JavaScript code."},
    {"callback", "A function passed as an argument to another function to be executed later."},
    {"promise.all", "A method that takes an iterable of promises and, when all of the promises have resolved, returns a single promise."},
    {"promise.race", "A method that returns a promise that resolves or rejects as soon as one of the promises in an iterable resolves or rejects."},
    {"async/await", "Syntax for working with promises in a more synchronous-looking manner."},
    {"with", "A deprecated statement for extending the scope chain to include a specified object (use carefully)."},
    {"from", "Creates a new array instance from an array-like or iterable object."},
    {"of", "Creates a new array instance with a variable number of arguments."},
    {"map", "Creates a new array with the results of calling a provided function on every element in the calling array."},
    {"filter", "Creates a new array with all elements that pass the test implemented by the provided function."},
    {"reduce", "Executes a reducer function on each element of the array, resulting in a single output value."},
    {"some", "Tests whether at least one element in the array passes the test implemented by the provided function."},
    {"every", "Tests whether all elements in the array pass the test implemented by the provided function."},
    {"find", "Returns the first element in the array that satisfies the provided testing function."},
    {"findIndex", "Returns the index of the first element in the array that satisfies the provided testing function."},
    {"includes", "Determines whether an array includes a certain value among its entries."},
    {"copyWithin", "Shallow copies a portion of an array to another location in the same array."},
    {"fill", "Fills all the elements of an array from a start index to an end index with a static value."},
    {"splice", "Changes the contents of an array by removing or replacing existing elements and/or adding new elements."},
    {"slice", "Returns a shallow copy of a portion of an array into a new array object."},
    {"concat", "Combines two or more arrays and returns a new array."},
    {"join", "Joins all elements of an array into a string."},
    {"toString", "Converts and returns the array as a string."},
    {"toLocaleString", "Returns a string representing the elements of the array."},
    {"reverse", "Reverses the elements of an array in place."},
    {"sort", "Sorts the elements of an array in place and returns the sorted array."},
    {"mut", "Specifies that a variable is mutable and can be changed."},
    {"const", "Defines a constant value that cannot be changed."},
    {"static", "Defines a static variable that lives for the entire duration of the program."},
    {"if", "A conditional statement that executes code if its condition evaluates to true."},
    {"else", "Defines code to execute if the corresponding if condition is false."},
    {"match", "A powerful control flow construct that compares a value against patterns."},
    {"for", "A loop construct used for iterating over a range or collection."},
    {"while", "A loop construct that executes code as long as a condition is true."},
    {"loop", "A loop construct that continuously executes code until explicitly broken."},
    {"break", "Exits from a loop or match expression."},
    {"continue", "Skips the current iteration of a loop and continues with the next iteration."},
    {"return", "Ends the execution of a function and optionally returns a value."},
    {"struct", "A data structure that groups together different types of variables."},
    {"enum", "A data type consisting of a set of named values."},
    {"trait", "Defines shared behavior that types can implement."},
    {"impl", "Implements methods and traits for a type."},
    {"use", "Brings paths into scope to simplify code."},
    {"mod", "Defines a module for organizing code."},
    {"pub", "Makes items public, allowing access from outside the module."},
    {"crate", "A package of Rust code."},
    {"self", "Refers to the current module or instance."},
    {"super", "Refers to the parent module."},
    {"as", "Used for type casting or renaming imports."},
    {"dyn", "Used for dynamic dispatch in trait objects."},
    {"await", "Suspends execution until a future is ready."},
    {"async", "Defines an asynchronous function or block."},
    {"Box", "A smart pointer for heap allocation."},
    {"Rc", "A reference-counted smart pointer for shared ownership."},
    {"Arc", "An atomic reference-counted smart pointer for thread-safe shared ownership."},
    {"RefCell", "A mutable memory location with dynamic borrow checking."},
    {"Mutex", "A mutual exclusion primitive for thread-safe access to data."},
    {"Atomic", "A module for atomic operations on primitive types."},
    {"Option", "A type that represents an optional value, which can be either Some(T) or None."},
    {"Result", "A type that represents either success (Ok) or failure (Err)."},
    {"program", "Defines the main program block in Fortran."},
    {"end", "Marks the end of a program, subroutine, function, or module."},
    {"implicit", "Specifies implicit typing rules for variables."},
    {"none", "Disables implicit typing."},
    {"integer", "Data type representing integer values."},
    {"real", "Data type representing single-precision floating-point numbers."},
    {"double", "Data type representing double-precision floating-point numbers."},
    {"complex", "Data type representing complex numbers."},
    {"logical", "Data type representing boolean values, true or false."},
    {"character", "Data type representing a sequence of characters."},
    {"parameter", "Defines a constant value."},
    {"dimension", "Specifies the size of an array."},
    {"allocate", "Dynamically allocates memory for arrays."},
    {"deallocate", "Frees memory allocated for arrays."},
    {"do", "A loop construct that iterates over a range of values."},
    {"elseif", "Defines an alternative condition in an if statement."},
    {"select", "Begins a case selection block (similar to switch-case in other languages)."},
    {"case", "Defines a branch in a select case statement."},
    {"switch", "A conditional construct similar to select case (not typically used in modern Fortran)."},
    {"call", "Invokes a subroutine or function."},
    {"subroutine", "Defines a block of code that can be called with parameters."},
    {"function", "Defines a block of code that returns a value."},
    {"module", "Defines a module for organizing code into logical units."},
    {"interface", "Defines a block that describes the interface to a procedure or function."},
    {"contains", "Specifies that a subroutine or function is contained within a module or program unit."},
    {"extern", "Specifies that a procedure is defined externally (not used in modern Fortran)."},
    {"open", "Opens a file for input or output operations."},
    {"close", "Closes a file that was previously opened."},
    {"read", "Reads data from a file into a variable."},
    {"write", "Writes data from a variable to a file."},
    {"print", "Outputs data to the standard output (usually the console)."},
    {"format", "Specifies the format for input/output operations."},
    {"backspace", "Moves the file pointer backward by one record or position."},
    {"rewind", "Moves the file pointer to the beginning of the file."},
    {"endfile", "Marks the end of the file for reading operations."},
    {"inquire", "Queries information about a file or I/O unit."},
    {"pause", "Pauses program execution, typically waiting for user input or an event (not commonly used)."},
    {"stop", "Stops program execution and optionally provides an exit status."},
    {"data", "Initializes variables or arrays with specified values."},
    {"echo", "Outputs one or more strings to the screen."},
    {"print", "Outputs a string to the screen and returns 1."},
    {"include", "Includes and evaluates a specified file in the script."},
    {"require", "Includes and evaluates a specified file; fatal error if the file is not found."},
    {"include_once", "Includes and evaluates a specified file only once in the script."},
    {"require_once", "Includes and evaluates a specified file only once; fatal error if the file is not found."},
    {"var", "Declares a variable (deprecated in favor of 'public')."},
    {"public", "An access specifier that allows class members to be accessible from outside the class."},
    {"private", "An access specifier that restricts access to class members from outside the class."},
    {"protected", "An access specifier that allows access to class members within the class and its subclasses."},
    {"extends", "Indicates that a class is inheriting properties and methods from a parent class."},
    {"implements", "Indicates that a class is implementing an interface."},
    {"abstract", "Defines a class or method that cannot be instantiated or used directly."},
    {"final", "Declares a class or method that cannot be extended or overridden."},
    {"foreach", "Loops over each element of an array or object."},
    {"default", "Specifies the default block of code to execute if no case matches in a switch statement."},
    {"try", "Begins a block of code that will be tested for exceptions."},
    {"catch", "Handles exceptions thrown by a try block."},
    {"finally", "Defines a block of code that is always executed after try and catch blocks."},
    {"throw", "Throws an exception to be caught by catch blocks."},
    {"isset", "Determines if a variable is set and is not null."},
    {"unset", "Unsets a variable, destroying its value and making it undefined."},
    {"empty", "Checks if a variable is empty."},
    {"global", "Declares a variable as global, making it accessible across different scopes."},
    {"parent", "Refers to the parent class in PHP, used to access inherited methods and properties."},
    {"new", "Instantiates a new object from a class."},
    {"this", "Refers to the current instance of the class."},
    {"namespace", "Defines a namespace to avoid name conflicts in PHP code."},
    {"trait", "A mechanism for code reuse in PHP, allowing multiple classes to use the same methods."},
    {"callable", "Indicates that a function or method can be called."},
    {"yield", "Generates values from a generator function."},
    {"list", "Assigns values to a list of variables in one operation."},
    {"declare", "Sets execution directives for the current script."},
    {"exit", "Terminates the current script with an optional exit status."},
    {"die", "Alias of exit; terminates the current script with an optional exit status."},
    {"assert", "Evaluates an expression and triggers an error if the assertion fails."},
    {"call_user_func", "Calls a user-defined function."},
    {"call_user_func_array", "Calls a user-defined function with an array of parameters."},
    {"def", "Defines a method in Ruby."},
    {"end", "Terminates a block of code, such as a method or class definition."},
    {"class", "Defines a new class in Ruby."},
    {"module", "Defines a module, a collection of methods and constants that can be included in classes."},
    {"include", "Mixes in a module's methods into a class."},
    {"extend", "Adds a module's methods to the class itself, making them class methods."},
    {"require", "Loads an external Ruby file, typically used for libraries and modules."},
    {"require_relative", "Loads a Ruby file relative to the current file's directory."},
    {"unless", "A conditional statement that executes code if its condition evaluates to false."},
    {"case", "Begins a case statement for multi-way branching."},
    {"when", "Specifies a branch in a case statement."},
    {"return", "Exits from a method and optionally returns a value."},
    {"yield", "Pauses a method's execution and passes control to a block."},
    {"def", "Defines a method in Ruby."},
    {"self", "Refers to the current instance of the class or module."},
    {"super", "Calls a method with the same name in the superclass."},
    {"module", "Defines a module in Ruby, a collection of methods and constants."},
    {"class", "Defines a new class in Ruby."},
    {"alias", "Creates a new name for an existing method or variable."},
    {"attr_reader", "Defines a getter method for an instance variable."},
    {"attr_writer", "Defines a setter method for an instance variable."},
    {"attr_accessor", "Defines both getter and setter methods for an instance variable."},
    {"protected", "Makes methods accessible only within the class and its subclasses."},
    {"private", "Makes methods accessible only within the class itself."},
    {"public", "Makes methods accessible from outside the class."},
    {"module_function", "Converts instance methods to module functions, making them callable on the module."},
    {"prepend", "Inserts a module into the method lookup chain before the class itself."},
    {"define_method", "Dynamically defines a method at runtime."},
    {"respond_to?", "Checks if an object responds to a given method."},
    {"send", "Calls a method by its name, passed as a symbol or string."},
    {"instance_of?", "Checks if an object is an instance of a given class."},
    {"kind_of?", "Checks if an object is an instance of a given class or its subclasses."},
    {"is_a?", "Checks if an object is an instance of a given class or its subclasses."},
    {"eql?", "Checks if two objects are equal."},
    {"equal?", "Checks if two objects are the same object."},
    {"respond_to?", "Checks if an object responds to a given method."},
    {"method", "Returns a Method object for the named method."},
    {"object_id", "Returns the unique identifier for an object."},
    {"to_s", "Returns the string representation of an object."},
    {"to_i", "Converts an object to an integer."},
    {"to_f", "Converts an object to a floating-point number."},
    {"to_a", "Converts an object to an array."},
    {"to_h", "Converts an object to a hash."},
    {"instance_variables", "Returns an array of instance variable names for the object."},
    {"instance_variable_get", "Gets the value of an instance variable."},
    {"instance_variable_set", "Sets the value of an instance variable."},
    {"class_variable_get", "Gets the value of a class variable."},
    {"class_variable_set", "Sets the value of a class variable."},
    {"attr", "Defines a getter and/or setter method for instance variables."},
    {"defined?", "Checks if a given variable or method is defined."},
    {"puts", "Outputs data followed by a newline to the console."},
    {"print", "Outputs data without a newline to the console."},
    {"p", "Outputs data with a newline and inspects it."},
    {"exit", "Terminates the program with an optional exit status."},
    {"abort", "Terminates the program with an optional exit status and prints a message."},
    {"require", "Includes and evaluates a specified Ruby file."},
    {"load", "Loads and evaluates a specified Ruby file every time it is called."},
    {"eval", "Evaluates a string as Ruby code."},
    {"binding", "Returns the current execution context, allowing evaluation of code in that context."},
    {"caller", "Returns the current call stack."},
    {"caller_locations", "Returns detailed information about the call stack."},
    
    };